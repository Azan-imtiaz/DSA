Questions : All Paths From Source to Target





class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> result = new ArrayList<>(); // To store all paths
        List<Integer> path = new ArrayList<>(); // To store the current path
        path.add(0); // Start from the source node (Node 0)
        dfs(graph, 0, path, result); // Begin DFS from node 0
        return result;
    }

    private void dfs(int[][] graph, int currentNode, List<Integer> path, List<List<Integer>> result) {
        // Base case: If the current node is the target node
        if (currentNode == graph.length - 1) {
            result.add(new ArrayList<>(path)); // Add a copy of the current path to the result
            return;
        }

        // Recursive case: Visit all neighbors of the current node using a traditional for loop
        for (int i = 0; i < graph[currentNode].length; i++) {
            int neighbor = graph[currentNode][i]; // Get the neighbor at index i
            path.add(neighbor); // Add the neighbor to the path
            dfs(graph, neighbor, path, result); // Recursively explore
            path.remove(path.size() - 1); // Backtrack by removing the last node
        }
    }
}
