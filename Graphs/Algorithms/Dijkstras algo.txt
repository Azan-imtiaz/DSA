import java.util.*;

class Main {
    static class Edge {
        int dest;
        int src;
        int wei;

        public Edge(int _src, int _dest, int _wei) {
            dest = _dest;
            src = _src;
            wei = _wei;
        }
    }

    public static void createGraph(ArrayList<Edge>[] graph) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }

        graph[0].add(new Edge(0, 1, 4));
        graph[1].add(new Edge(1, 0, 4));

        graph[0].add(new Edge(0, 7, 8));
        graph[7].add(new Edge(7, 0, 8));

        graph[1].add(new Edge(1, 7, 11));
        graph[7].add(new Edge(7, 1, 11));

        graph[1].add(new Edge(1, 2, 8));
        graph[2].add(new Edge(2, 1, 8));

        graph[2].add(new Edge(2, 3, 7));
        graph[3].add(new Edge(3, 2, 7));

        graph[3].add(new Edge(3, 4, 9));
        graph[4].add(new Edge(4, 3, 9));

        graph[4].add(new Edge(4, 5, 14));
        graph[5].add(new Edge(5, 4, 14));

        graph[5].add(new Edge(5, 2, 4));
        graph[2].add(new Edge(2, 5, 4));

        graph[5].add(new Edge(5, 6, 2));
        graph[6].add(new Edge(6, 5, 2));

        graph[6].add(new Edge(6, 8, 6));
        graph[8].add(new Edge(8, 6, 6));

        graph[8].add(new Edge(8, 2, 2));
        graph[2].add(new Edge(2, 8, 2));

        graph[6].add(new Edge(6, 7, 1));
        graph[7].add(new Edge(7, 6, 1));

        graph[7].add(new Edge(7, 8, 7));
        graph[8].add(new Edge(8, 7, 7));
    }

    static class Pair implements Comparable<Pair> {
        int node;
        int dist;

        public Pair(int n, int d) {
            node = n;
            dist = d;
        }

        @Override
        public int compareTo(Pair p2) {
            return this.dist - p2.dist;
        }
    }

    public static void dijkstra(ArrayList<Edge>[] graph, boolean[] vis, int[] dist) {
        // Your way of initializing distances
        for(int i=0;i<dist.length;i++){
            if(i != 0){
                dist[i]=Integer.MAX_VALUE;
            }
        }
        //or  // Arrays.fill(dist, Integer.MAX_VALUE);
        
        dist[0] = 0;
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(0, 0));
        

        while (!pq.isEmpty()) {
            Pair curr = pq.poll();
            int curNode = curr.node;

            if (!vis[curNode]) {
                vis[curNode] = true;

                for (Edge e : graph[curNode]) {
                    int u = e.src;
                    int v = e.dest;
                    int wt = e.wei;

                    if (dist[u] + wt < dist[v]) {
                        dist[v] = dist[u] + wt;
                        pq.add(new Pair(v, dist[v]));
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        ArrayList<Edge>[] graph = new ArrayList[9];
        createGraph(graph);

        int[] dist = new int[9];
        boolean[] vis = new boolean[9];

        dijkstra(graph, vis, dist);

        System.out.println("Shortest distances from source node 0:");
        for (int i = 0; i < dist.length; i++) {
            System.out.println("Node " + i + " : " + dist[i]);
        }
    }
}
