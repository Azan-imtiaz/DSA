import java.util.*;

class Main {

    static class Edge {
        int dest;
        int src;

        public Edge(int _src, int _dest) {
            src = _src;
            dest = _dest;
        }
    }

    // Create graph
    public static void createGraph(ArrayList<Edge>[] graph) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        graph[0].add(new Edge(0, 2));
        graph[0].add(new Edge(0, 3));
        graph[1].add(new Edge(1, 0));
        graph[2].add(new Edge(2, 1));
        graph[3].add(new Edge(3, 4));
        graph[4].add(new Edge(4, 0));
    }

    // Print the graph
    public static void printGraph(ArrayList<Edge>[] graph) {
        System.out.println("Graph Representation (Edges):");
        for (int i = 0; i < graph.length; i++) {
            System.out.print("Vertex " + i + ": ");
            for (Edge e : graph[i]) {
                System.out.print("-> " + e.dest + " ");
            }
            System.out.println();
        }
    }

    // Detect Cycle using DFS
    public static boolean detectCycle(ArrayList<Edge>[] graph, int cur, boolean[] vis, boolean[] recStack) {
        vis[cur] = true;
        recStack[cur] = true;

        for (int i = 0; i < graph[cur].size(); i++) {
            Edge e = graph[cur].get(i);

            if (!vis[e.dest]) {
                if (detectCycle(graph, e.dest, vis, recStack)) {
                    return true; // Cycle detected
                }
            } else if (recStack[e.dest]) {
                return true; // Back edge detected
            }
        }

        recStack[cur] = false;
        return false;
    }

    // Perform Topological Sorting
    public static void performTopologicalSort(ArrayList<Edge>[] graph) {
        boolean[] vis = new boolean[graph.length];
        boolean[] recStack = new boolean[graph.length];
        boolean hasCycle = false;

        // Check for cycles
        for (int i = 0; i < graph.length; i++) {
            if (!vis[i]) {
                if (detectCycle(graph, i, vis, recStack)) {
                    hasCycle = true;
                    break;
                }
            }
        }

        if (hasCycle) {
            System.out.println("\nThe graph contains a cycle. Topological Sort is not possible.");
        } else {
            System.out.println("\nThe graph is acyclic. Performing Topological Sort:");
            vis = new boolean[graph.length];
            Stack<Integer> stack = new Stack<>();
            
            for (int i = 0; i < graph.length; i++) {
                if (!vis[i]) {
                    topologicalSortUtil(graph, i, vis, stack);
                }
            }

            // Print the Topological Order
            while (!stack.isEmpty()) {
                System.out.print(stack.pop() + " ");
            }
        }
    }

    // Topological Sort Utility (DFS-Based)
    public static void topologicalSortUtil(ArrayList<Edge>[] graph, int cur, boolean[] vis, Stack<Integer> stack) {
        vis[cur] = true;

        for (int i = 0; i < graph[cur].size(); i++) {
            Edge e = graph[cur].get(i);
            if (!vis[e.dest]) {
                topologicalSortUtil(graph, e.dest, vis, stack);
            }
        }

        stack.push(cur); // Push node to stack after visiting neighbors
    }


public static void createUndirectedGraph(ArrayList<Edge>[] graph) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        // Adding edges (acyclic undirected graph)
    graph[0].add(new Edge(0, 1));
    graph[1].add(new Edge(1, 0));

    graph[1].add(new Edge(1, 2));
    graph[2].add(new Edge(2, 1));

    graph[2].add(new Edge(2, 3));
    graph[3].add(new Edge(3, 2));

    graph[3].add(new Edge(3, 4));
    graph[4].add(new Edge(4, 3));
    }
    
public static boolean detect_Cycle_In_Undirected_Graph(ArrayList<Edge>[] graph,int cur, boolean[] vis,int parent ){
    vis[cur]=true;
    
    for(Edge e: graph[cur]){
        if(vis[e.dest]==true && parent != e.dest){
            return true;
        }
        if(!vis[e.dest]){
    if(detect_Cycle_In_Undirected_Graph(graph,e.dest,vis,cur)){
        return true;
    }        
        }
    }
    return false;
}
    public static void main(String[] args) {
        
        // Create the graph
        ArrayList<Edge>[] graph = new ArrayList[5];
        createGraph(graph);

        // Print the graph
        printGraph(graph);

        // Perform Topological Sort
        performTopologicalSort(graph);
    
        //undirceted graph
        ArrayList<Edge>[] graph2 = new ArrayList[5];
        createUndirectedGraph(graph2);
         printGraph(graph2);
         
         
         //DetecT Cycle in undirected  graph 
 if(detect_Cycle_In_Undirected_Graph(graph2,0,new boolean[5],-1 )){
     System.out.println("Cycle detected in above undireted graph");
 }
 else{
     System.out.println("Cycle Not detected in above undireted graph");
 }
         
         
        
    }
}
