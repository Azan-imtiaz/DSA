Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).


 class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> listOfLists = new ArrayList<>();
        if (root == null) {
            return listOfLists; // Return empty list if root is null
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root); // Start with the root node

        while (!queue.isEmpty()) {
            int levelSize = queue.size(); // Get the number of nodes at the current level
            List<Integer> currentLevel = new ArrayList<>(); // List to store the current level's nodes

            for (int i = 0; i < levelSize; i++) {
                TreeNode currentNode = queue.poll(); // Dequeue the current node
                currentLevel.add(currentNode.val); // Add its value to the current level's list

                // Enqueue the left and right children, if they exist
                if (currentNode.left != null) {
                    queue.offer(currentNode.left);
                }
                if (currentNode.right != null) {
                    queue.offer(currentNode.right);
                }
            }
            listOfLists.add(currentLevel); // Add the current level's list to the main result list
        }

        return listOfLists; // Return the list of lists
    }
}