class Solution {
    public int trap(int[] height) {
        if (height.length == 0 || height.length == 1 || height.length == 2)
            return 0;

        int n = height.length;
        int[] lb = new int[n];
        int[] rb = new int[n];
        lb[0] = height[0];
        
        // Compute the maximum height to the left of each position
        for (int i = 1; i < n; i++) {
            lb[i] = Math.max(lb[i - 1], height[i]);
        }
        
        rb[n - 1] = height[n - 1];
        
        // Compute the maximum height to the right of each position
        for (int i = n - 2; i >= 0; i--) {
            rb[i] = Math.max(rb[i + 1], height[i]);
        }
        
        int res = 0;
        for (int i = 0; i < n; i++) {
            int wl = Math.min(lb[i], rb[i]);
            int tw = wl - height[i];
            if (tw > 0) { // Only add positive trapped water
                res += tw;
            }
        }
        return res;
    }
}
