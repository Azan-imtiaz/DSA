Given a string s, return the number of palindromic substrings in it.

A string is a palindrome when it reads the same backward as forward.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
Example 2:

Input: s = "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".


class Solution {
    public int countSubstrings(String s) {
        int count = 0;


//Approach
// The countSubstrings method iterates through each character of the string and treats it as a center.
// It considers two cases for palindrome centers:
// Odd-length palindromes (single character center).
// Even-length palindromes (two consecutive characters as the center).
// The countPalindromesAroundCenter method expands outwards from the center while the characters match, counting all valid palindromes.





        // Consider every single character and pair of consecutive characters as the center

        for (int i = 0; i < s.length(); i++) {
            count += countPalindromesAroundCenter(s, i, i);   // Odd length palindromes
            count += countPalindromesAroundCenter(s, i, i + 1); // Even length palindromes
        }
        
        return count;
    }
    
    private int countPalindromesAroundCenter(String s, int left, int right) {
        int count = 0;
        
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            count++;
            left--;
            right++;
        }
        
        return count;
    }
}
