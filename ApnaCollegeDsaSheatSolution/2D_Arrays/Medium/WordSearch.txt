class Solution {
    public boolean exist(char[][] board, String word) {
        char[] word_arr = word.toCharArray();

        // Iterate through each cell in the gridfor (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == word_arr[0] && exists(board, i, j, word_arr, 0)) {
                    return true;
                }
            }
        }
        return false; // Return false if the word is not found
    }

    private boolean exists(char[][] board, int i, int j, char[] word, int index) {
        // Check boundaries and if the current cell matches the current character in the wordif (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word[index]) {
            return false;
        }

        // Check if we've matched all characters in the wordif (index == word.length - 1) {
            return true;
        }

        char ch = board[i][j];
        board[i][j] = '*'; // Mark the cell as visited// Explore all four possible directionsboolean res = exists(board, i + 1, j, word, index + 1)
                || exists(board, i - 1, j, word, index + 1)
                || exists(board, i, j + 1, word, index + 1)
                || exists(board, i, j - 1, word, index + 1);

        board[i][j] = ch; // Restore the original value of the cellreturn res;
    }