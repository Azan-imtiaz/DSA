 
 Using stack in time complexity 0(N) and space 0(N)
 class Solution {
    public boolean isPalindrome(ListNode head) {
        Stack<Integer> stack = new Stack<>();
        ListNode temp = head;
        
        // Step 1: Push all elements of the linked list to the stack
        while (temp != null) {
            stack.push(temp.val);
            temp = temp.next;
        }
        
        // Step 2: Traverse the list again and compare with stack
        temp = head;
        while (temp != null) {
            if (temp.val != stack.pop()) {
                return false; // Mismatch found, not a palindrome
            }
            temp = temp.next;
        }
        
        // If all elements matched, it's a palindrome
        return true;
    }
}
Without using stack in time complexity 0(N) and space 0(1)

class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) {
            return true; // An empty list or a single node list is a palindrome.
        }

        // Step 1: Find the middle of the linked list using slow and fast pointers.ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 2: Reverse the second half of the list.ListNode secondHalfStart = reverseList(slow);

        // Step 3: Compare the first half and the reversed second half.ListNode firstHalfStart = head;
        ListNode secondHalf = secondHalfStart;
        while (secondHalf != null) {
            if (firstHalfStart.val != secondHalf.val) {
                return false; // Mismatch found, not a palindrome.
            }
            firstHalfStart = firstHalfStart.next;
            secondHalf = secondHalf.next;
        }

        // Step 4: (Optional) Restore the list by reversing the second half again.
        reverseList(secondHalfStart); // Restore the list if needed.return true; // If all elements matched, it's a palindrome.
    }

    // Function to reverse a linked list.private ListNode reverseList(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
}
 