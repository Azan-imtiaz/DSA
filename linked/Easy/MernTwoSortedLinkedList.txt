Here's the approach used in the solution:

Create a Dummy Node: Initialize a dummy node to serve as a starting point for the new merged list.

Initialize Pointers: Use two pointers, one for iterating through list1 and one for list2. Also, use a current pointer to build the new list.

Iterate and Compare: Traverse both list1 and list2 simultaneously. Compare the current nodes of both lists and attach the smaller node to the current pointer. Move the pointer of the list from which the node was taken.

Attach Remaining Nodes: After one of the lists is exhausted, attach the remaining nodes of the other list to the merged list.

Return the Result: Return the next node of the dummy node, which is the head of the new merged list.


class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
      ListNode newNode=new ListNode(Integer.MIN_VALUE);

       ListNode head=newNode;

       while(list1 != null &&  list2 != null){
       if(list1.val <= list2.val ){
        newNode.next=list1;
       list1=list1.next;
       }
       else{
        newNode.next=list2;
        list2=list2.next;
       }

       newNode=newNode.next;
       }
       
       if(list1 ==null){
        newNode.next=list2;
       }
       else{
        newNode.next=list1;
       }

  return head.next;


    }
}